parameters:
  - name: PublishNuGetPackages
    displayName: Publish NuGet Packages
    default: false
    type: boolean
  - name: PublishSymbols
    displayName: Publish Symbols
    type: boolean
    default: false
  - name: BuildType
    displayName: Type of Build
    type: string
    default: PR
  - name: OTelProfilerNuGetVersion
    displayName: Overwrite Version for OTel Profiler NuGet Package
    type: string
    default: ""
  - name: AppInsightsProfilerNuGetVersion
    displayName: Overwrite Version for App Insights Profiler NuGet Package
    type: string
    default: ""

jobs:
  - job: mainBuild
    pool:
      type: windows
    variables:
      ob_nugetPublishing_enabled: ${{ parameters.PublishNuGetPackages }}
      ob_outputDirectory: "$(Build.ArtifactStagingDirectory)/out" # this directory is uploaded to pipeline artifacts, reddog and cloudvault. More info at https://aka.ms/obpipelines/artifacts
      ob_symbolsPublishing_symbolsFolder: "$(Build.ArtifactStagingDirectory)/out"
      ob_symbolsPublishing_enabled: ${{ parameters.PublishSymbols }}

    steps:
      - task: NuGetToolInstaller@1
        displayName: Use Latest NuGet

      - task: UseDotNet@2
        inputs:
          packageType: "sdk"
          version: "8.x"

      - task: PowerShell@2
        displayName: Set up symlinks
        inputs:
          targetType: "inline"
          script: |
            git config core.symlinks true
            git reset --hard

      - task: DotNetCoreCLI@2
        displayName: Restore solution
        inputs:
          command: "restore"
          projects: $(Build.SourcesDirectory)/src/EventPipe.Profilers.All.sln
          selectOrConfig: config
          nugetConfigPath: NuGet.Config

      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: "build"
          projects: "$(Build.SourcesDirectory)/src/EventPipe.Profilers.All.sln"
          arguments: "/p:Configuration=$(BuildConfiguration) /p:IsSpOfficialBuild=true"

      - task: DotNetCoreCLI@2
        displayName: Publish Uploader
        inputs:
          command: "publish"
          publishWebProjects: false
          projects: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Upload/ServiceProfiler.EventPipe.Upload.csproj"
          arguments: "--no-build --nologo -c $(BuildConfiguration) --no-restore --disable-build-servers"
          zipAfterPublish: false
          modifyOutputPath: false

      - task: onebranch.pipeline.signing@1
        displayName: Sign MS Binaries for the Uploader
        inputs:
          command: "sign"
          signing_profile: "external_distribution"
          files_to_sign: |
            **/publish/**/*.exe;
            **/publish/**/*.dll;
            !**/CommandLine.dll;
            !**/obj/**;
          search_root: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Upload"

      - task: onebranch.pipeline.signing@1
        displayName: Sign 3rd party Binaries for the Uploader
        inputs:
          command: "sign"
          cp_code: "135020002" # certificate Id, this is for 3rd party external distribution, refer to https://onebranch.visualstudio.com/Build/_git/OneBranch.Sign?path=/ESRP/Templates/operations for more details.
          files_to_sign: |
            **/publish/**/CommandLine.dll;
            !**/obj/**;
          search_root: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Upload"

      # Pack the uploader for Azure Monitor OpenTelemetry Profiler
      - task: ArchiveFiles@2
        displayName: Setup Uploader for Azure Monitor OpenTelemetry Profiler
        inputs:
          rootFolderOrFile: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Upload/bin/$(BuildConfiguration)/net8.0/publish/"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Otel/Azure.Monitor.OpenTelemetry.Profiler/obj/$(BuildConfiguration)/Uploader/Uploader.zip"
          replaceExistingArchive: true
          verbose: true
      
      # Pack the uploader for App Insights Profiler
      - task: CopyFiles@2
        displayName: Setup Uploader for App Insights Profiler
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Otel/Azure.Monitor.OpenTelemetry.Profiler/obj/$(BuildConfiguration)/Uploader"
          Contents: |
            Uploader.zip
          TargetFolder: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe/ServiceProfiler.EventPipe.AspNetCore/obj/$(BuildConfiguration)/Uploader/"

      # Signing binaries for Otel profiler
      - task: onebranch.pipeline.signing@1
        displayName: Sign MS Binaries for OTel Profiler
        inputs:
          command: "sign"
          signing_profile: "external_distribution"
          files_to_sign: |
            **/*.exe;
            **/*.dll;
            !src/ServiceProfiler.EventPipe.Upload/**;
          search_root: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Otel"

      # Signing binaries for App Insights profiler
      - task: onebranch.pipeline.signing@1
        displayName: Sign MS Binaries for App Insights Profiler
        inputs:
          command: "sign"
          signing_profile: "external_distribution"
          files_to_sign: |
            **/*.exe;
            **/*.dll;
            !src/ServiceProfiler.EventPipe.Upload/**;
          search_root: "$(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe"

      - task: DotNetCoreCLI@2
        displayName: "Create the NuGet package for Otel Profiler"
        inputs:
          command: "pack"
          nobuild: true
          packagesToPack: $(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Otel/Azure.Monitor.OpenTelemetry.Profiler/Azure.Monitor.OpenTelemetry.Profiler.csproj
          packDirectory: "$(Build.SourcesDirectory)/packages"
          ${{ if eq(parameters.OTelProfilerNuGetVersion, '') }}:
            buildProperties: "VersionSuffix=${{ lower(parameters.BuildType) }}-$(Build.BuildNumber);SymbolPackageFormat=symbols.nupkg"
          ${{ else }}:
            buildProperties: "Version=${{ parameters.OTelProfilerNuGetVersion }};SymbolPackageFormat=symbols.nupkg"

      - task: DotNetCoreCLI@2
        displayName: "Create the NuGet package for App Insights Profiler - Core"
        inputs:
          command: "pack"
          nobuild: true
          packagesToPack: $(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe/ServiceProfiler.EventPipe.Client/ServiceProfiler.EventPipe.Client.csproj
          packDirectory: "$(Build.SourcesDirectory)/packages"
          ${{ if eq(parameters.AppInsightsProfilerNuGetVersion, '') }}:
            buildProperties: "VersionSuffix=${{ lower(parameters.BuildType) }}-$(Build.BuildNumber);SymbolPackageFormat=symbols.nupkg"
          ${{ else }}:
            buildProperties: "Version=${{ parameters.AppInsightsProfilerNuGetVersion }};SymbolPackageFormat=symbols.nupkg"

      - task: DotNetCoreCLI@2
        displayName: "Create the NuGet package for App Insights Profiler - ASP.NET Core"
        inputs:
          command: "pack"
          nobuild: true
          packagesToPack: $(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe/ServiceProfiler.EventPipe.AspNetCore/ServiceProfiler.EventPipe.AspNetCore.csproj
          packDirectory: "$(Build.SourcesDirectory)/packages"
          ${{ if eq(parameters.AppInsightsProfilerNuGetVersion, '') }}:
            buildProperties: "VersionSuffix=${{ lower(parameters.BuildType) }}-$(Build.BuildNumber);SymbolPackageFormat=symbols.nupkg"
          ${{ else }}:
            buildProperties: "Version=${{ parameters.AppInsightsProfilerNuGetVersion }};SymbolPackageFormat=symbols.nupkg"

      # Sign NuGet packages
      - task: onebranch.pipeline.signing@1
        displayName: "Sign NuGet Packages"
        inputs:
          command: "sign"
          cp_code: "CP-401405"
          files_to_sign: '**\*.nupkg'
          search_root: "$(Build.SourcesDirectory)/packages"

      # Output artifacts - Otel Profiler
      - task: CopyFiles@2
        displayName: Copy Binaries - Otel Profiler
        inputs:
          SourceFolder: $(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Otel
          Contents: |
            **/bin/**
            # !ServiceProfiler.EventPipe.Upload/**
            # !!ServiceProfiler.EventPipe.Upload/**/publish/**
            # !ServiceProfiler.EventPipe.NuGetSigning/bin/**
            !**/obj/**
          TargetFolder: '$(Build.ArtifactStagingDirectory)/bin/ServiceProfiler.EventPipe.Otel'

      # Output artifacts - App Insights Profiler
      - task: CopyFiles@2
        displayName: Copy Binaries - App Insights Profiler
        inputs:
          SourceFolder: $(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe
          Contents: |
            **/bin/**
            # !ServiceProfiler.EventPipe.Upload/**
            # !!ServiceProfiler.EventPipe.Upload/**/publish/**
            # !ServiceProfiler.EventPipe.NuGetSigning/bin/**
            !**/obj/**
          TargetFolder: '$(Build.ArtifactStagingDirectory)/bin/ServiceProfiler.EventPipe'

      # Output artifacts - App Uploader
      - task: CopyFiles@2
        displayName: Copy Binaries - Uploader
        inputs:
          SourceFolder: $(Build.SourcesDirectory)/src/ServiceProfiler.EventPipe.Upload
          Contents: |
            **/publish/**
            !**/obj/**
          TargetFolder: '$(Build.ArtifactStagingDirectory)/bin/ServiceProfiler.EventPipe.Upload'

      # Output NuGet packages
      - task: CopyFiles@2
        displayName: Copy Nuget Packages
        inputs:
          SourceFolder: $(Build.SourcesDirectory)/packages
          Contents: |
            **\*.*nupkg
          TargetFolder: $(Build.ArtifactStagingDirectory)/packages
          flattenFolders: true

      # Publish Artifacts
      - task: CopyFiles@2
        displayName: "Copy Files for 'Publish Artifacts' publish task"
        inputs:
          SourceFolder: $(Build.ArtifactStagingDirectory)
          Contents: "**"
          TargetFolder: $(Build.ArtifactStagingDirectory)/out
